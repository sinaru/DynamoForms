!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("dynamo-forms",[],r):"object"==typeof exports?exports["dynamo-forms"]=r():e["dynamo-forms"]=r()}("undefined"!=typeof self?self:this,function(){return function(e){var r={};function t(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=r,t.d=function(e,r,o){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(o,n,function(r){return e[r]}.bind(null,n));return o},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";t.r(r);class o{constructor(e){this._errors=[],this.validations=e}validate(){return this.validations.forEach(e=>{this[e[0]](e[1])}),0===this._errors.length}errors(){return this._errors}anyPresent(e){const r=e.defaultValues||[],t=(e.errorMsg,e.elements);Array.from(t).some(e=>""!==e.value&&!r.includes(e.value))||this._errors.push(e.errorMsg)}}o.Validators={ANY_PRESET:"anyPresent"};class n{constructor(e){this._form=e,this._reload(),this._handleFieldBehaviors(),this._handleFormSubmit()}validate(){return this._reload(),this._validators.every(e=>e.validate())}errors(){return this._validators.flatMap(e=>e.errors())}_handleFormSubmit(){this._form.addEventListener("submit",e=>{this.validate()||(this._renderErrors(this._form.querySelector(".errors")),e.preventDefault())})}_handleFieldBehaviors(){const e=this._form.querySelectorAll("*[data-dyn-behaviors]");Array.from(e).forEach(e=>this._handleFieldBehaviorForNode(e))}_handleFieldBehaviorForNode(e){e.getAttribute("data-dyn-behaviors").split("|").includes("enableOnValid")&&(e.disabled=!0,Array.from(this._nodes).forEach(r=>{r.addEventListener("input",()=>{this._enableOnValid(e)})}))}_enableOnValid(e){e.disabled=!this.validate()}_reload(){this._validators=[],this._nodes=this._form.querySelectorAll("*[data-dyn-field]"),this._generateValidationRules()}_renderErrors(e){e.innerHTML="",this.errors().forEach(r=>{e.insertAdjacentHTML("beforeend",`<div class='form-error'>${r}</div>`)})}_generateValidationRules(){this._nodes.forEach(e=>this._generateValidationRulesForNode(e))}_generateValidationRulesForNode(e){if(!e.hasAttribute("data-dyn-validators"))return;e.getAttribute("data-dyn-validators").split("|").forEach(r=>this._validateRuleForNode(e,r))}_validateRuleForNode(e,r){let t={};if(o.Validators.ANY_PRESET===r){t.validator=o.Validators.ANY_PRESET;const n=e.getAttribute("data-dyn-group");t.elements=Array.from(this._nodes).filter(e=>e.getAttribute("data-dyn-group")===n),t.errorMsg="At least one field is required";const a=new o([[r,t]]);this._validators.push(a)}}}window.onload=function(){document.querySelectorAll(".dynamo-forms").forEach(e=>new n(e))},t.d(r,"HtmlFormValidator",function(){return n})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,